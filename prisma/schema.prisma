generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int           @id @default(autoincrement())
  nama                     String
  email                    String        @unique
  password                 String
  isVerified               Boolean       @default(false)
  isResetPasswordVerified  Boolean
  verificationOtp          String?
  verificationOtpCreatedAt DateTime?
  resetPasswordOtp         String?
  resetOtpCreatedAt        DateTime?
  transactions             Transaction[] 
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model ProductType {
  id        String    @id @default(uuid())
  name      String    @unique 
  products  Product[]
  sizes     Size[]    
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name]) 
}

model Category {
  id        Int       @id @default(autoincrement())
  nama      String    @unique
  deskripsi String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([nama]) 
}

model Brand {
  id        Int       @id @default(autoincrement())
  nama      String    @unique
  deskripsi String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([nama])
}

model Product {
  id            String            @id @default(uuid())
  nama          String
  deskripsi     String?
  hargaBeli     Float
  hargaJual     Float
  categoryId    Int
  brandId       Int
  stock         Int               @default(0) 
  minStock      Int               @default(0) 
  image         String
  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brand         Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  productTypeId String
  productType   ProductType       @relation(fields: [productTypeId], references: [id])
  sizes         ProductSize[]
  transactions  TransactionItem[]
  kondisi       KondisiProduk     @default(BARU)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([categoryId, productTypeId, brandId])
  @@index([nama]) 
}

enum KondisiProduk {
  BARU
  BEKAS
  REKONDISI
}

model Size {
  id            String         @id @default(uuid())
  label         String        
  productTypeId String
  productType   ProductType   @relation(fields: [productTypeId], references: [id])
  products      ProductSize[]
  transactions  TransactionItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([label, productTypeId])
  @@index([productTypeId])
}

model ProductSize {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  quantity   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, sizeId])
  @@index([productId, sizeId])
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  DIGITAL_WALLET
}

model Customer {
  id           String        @id @default(uuid())
  nama         String
  email        String?       @unique
  phone        String?
  alamat       String?
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([email, phone])
}

model Transaction {
  id            String            @id @default(uuid())
  customer      Customer?         @relation(fields: [customerId], references: [id])
  customerId    String?
  totalAmount   Float
  paymentMethod PaymentMethod
  items         TransactionItem[]
  processedBy   User?             @relation(fields: [userId], references: [id])
  userId        Int?
  diskon        Float             @default(0)
  catatan       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([customerId, createdAt])
  @@index([userId, createdAt])
}

model TransactionItem {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  size          Size        @relation(fields: [sizeId], references: [id])
  sizeId        String
  quantity      Int
  hargaJual     Float
  hargaBeli     Float
  diskon        Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([transactionId])
  @@index([productId, sizeId])
}
